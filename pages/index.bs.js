// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Controls = require("../components/Controls.bs.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var NextUrql = require("next-urql");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var PokemonGrid = require("../components/PokemonGrid.bs.js");

var ppx_printed_query = "query pokemon($first: Int!)  {\npokemons(first: $first)  {\nid  \nname  \ntypes  \nresistant  \nweaknesses  \nimage  \nevolutions  {\nname  \n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "pokemons");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    tmp = match$1 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$2)).map((function (value) {
              var match = Js_json.decodeNull(value);
              if (match !== undefined) {
                return ;
              } else {
                var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                var match$1 = Js_dict.get(value$1, "id");
                var tmp;
                if (match$1 !== undefined) {
                  var value$2 = Caml_option.valFromOption(match$1);
                  var match$2 = Js_json.decodeString(value$2);
                  tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                } else {
                  tmp = Js_exn.raiseError("graphql_ppx: Field id on type Pokemon is missing");
                }
                var match$3 = Js_dict.get(value$1, "name");
                var tmp$1;
                if (match$3 !== undefined) {
                  var value$3 = Caml_option.valFromOption(match$3);
                  var match$4 = Js_json.decodeNull(value$3);
                  if (match$4 !== undefined) {
                    tmp$1 = undefined;
                  } else {
                    var match$5 = Js_json.decodeString(value$3);
                    tmp$1 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  }
                } else {
                  tmp$1 = undefined;
                }
                var match$6 = Js_dict.get(value$1, "types");
                var tmp$2;
                if (match$6 !== undefined) {
                  var value$4 = Caml_option.valFromOption(match$6);
                  var match$7 = Js_json.decodeNull(value$4);
                  tmp$2 = match$7 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$4)).map((function (value) {
                            var match = Js_json.decodeNull(value);
                            if (match !== undefined) {
                              return ;
                            } else {
                              var match$1 = Js_json.decodeString(value);
                              return match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                            }
                          }));
                } else {
                  tmp$2 = undefined;
                }
                var match$8 = Js_dict.get(value$1, "resistant");
                var tmp$3;
                if (match$8 !== undefined) {
                  var value$5 = Caml_option.valFromOption(match$8);
                  var match$9 = Js_json.decodeNull(value$5);
                  tmp$3 = match$9 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$5)).map((function (value) {
                            var match = Js_json.decodeNull(value);
                            if (match !== undefined) {
                              return ;
                            } else {
                              var match$1 = Js_json.decodeString(value);
                              return match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                            }
                          }));
                } else {
                  tmp$3 = undefined;
                }
                var match$10 = Js_dict.get(value$1, "weaknesses");
                var tmp$4;
                if (match$10 !== undefined) {
                  var value$6 = Caml_option.valFromOption(match$10);
                  var match$11 = Js_json.decodeNull(value$6);
                  tmp$4 = match$11 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$6)).map((function (value) {
                            var match = Js_json.decodeNull(value);
                            if (match !== undefined) {
                              return ;
                            } else {
                              var match$1 = Js_json.decodeString(value);
                              return match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                            }
                          }));
                } else {
                  tmp$4 = undefined;
                }
                var match$12 = Js_dict.get(value$1, "image");
                var tmp$5;
                if (match$12 !== undefined) {
                  var value$7 = Caml_option.valFromOption(match$12);
                  var match$13 = Js_json.decodeNull(value$7);
                  if (match$13 !== undefined) {
                    tmp$5 = undefined;
                  } else {
                    var match$14 = Js_json.decodeString(value$7);
                    tmp$5 = match$14 !== undefined ? match$14 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
                  }
                } else {
                  tmp$5 = undefined;
                }
                var match$15 = Js_dict.get(value$1, "evolutions");
                var tmp$6;
                if (match$15 !== undefined) {
                  var value$8 = Caml_option.valFromOption(match$15);
                  var match$16 = Js_json.decodeNull(value$8);
                  tmp$6 = match$16 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$8)).map((function (value) {
                            var match = Js_json.decodeNull(value);
                            if (match !== undefined) {
                              return ;
                            } else {
                              var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                              var match$1 = Js_dict.get(value$1, "name");
                              var tmp;
                              if (match$1 !== undefined) {
                                var value$2 = Caml_option.valFromOption(match$1);
                                var match$2 = Js_json.decodeNull(value$2);
                                if (match$2 !== undefined) {
                                  tmp = undefined;
                                } else {
                                  var match$3 = Js_json.decodeString(value$2);
                                  tmp = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                                }
                              } else {
                                tmp = undefined;
                              }
                              return {
                                      name: tmp
                                    };
                            }
                          }));
                } else {
                  tmp$6 = undefined;
                }
                return {
                        id: tmp,
                        name: tmp$1,
                        types: tmp$2,
                        resistant: tmp$3,
                        weaknesses: tmp$4,
                        image: tmp$5,
                        evolutions: tmp$6
                      };
              }
            }));
  } else {
    tmp = undefined;
  }
  return {
          pokemons: tmp
        };
}

function make(first, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                    "first",
                    first
                  ]].filter((function (param) {
                      return Caml_obj.caml_notequal(param[1], null);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var first = variables.first;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                    "first",
                    first
                  ]].filter((function (param) {
                      return Caml_obj.caml_notequal(param[1], null);
                    }))),
          parse: parse
        };
}

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var GetPokemon = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function Index(Props) {
  var match = React.useReducer((function (state, action) {
          if (action.tag) {
            return /* record */[
                    /* search */state[/* search */0],
                    /* count */action[0]
                  ];
          } else {
            return /* record */[
                    /* search */action[0],
                    /* count */state[/* count */1]
                  ];
          }
        }), /* record */[
        /* search */"",
        /* count */20
      ]);
  var dispatch = match[1];
  var state = match[0];
  var handleSearchChange = function (ev) {
    return Curry._1(dispatch, /* SetSearch */Block.__(0, [ev.target.value]));
  };
  var handleCountChange = function (ev) {
    return Curry._1(dispatch, /* SetCount */Block.__(1, [ev.target.value]));
  };
  return React.createElement(React.Fragment, undefined, React.createElement(Controls.make, {
                  search: state[/* search */0],
                  count: state[/* count */1],
                  handleSearchChange: handleSearchChange,
                  handleCountChange: handleCountChange
                }), React.createElement(PokemonGrid.make, {
                  count: state[/* count */1],
                  search: state[/* search */0]
                }));
}

var clientOptions = {
  url: "https://graphql-pokemon.now.sh"
};

var $$default = NextUrql.withUrqlClient(clientOptions)(Index);

var make$1 = Index;

exports.GetPokemon = GetPokemon;
exports.make = make$1;
exports.clientOptions = clientOptions;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
/* default Not a pure module */
